name: Run data collection
on:
  schedule:
    - cron: "5 6 * * *"
  workflow_dispatch:
    inputs:
      date:
        description: 'Date'
        required: true
        default: 'latest'

jobs:

  update-data:
    name: Collect and Update data
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DEBUG: ${{ secrets.DEBUG }}
      BUILD_LOG: ./build-${{ github.run_id }}.log
      PGHOST: ${{ secrets.PGHOST }}
      PGPORT: ${{ secrets.PGPORT }}
      PGDATABASE: ${{ secrets.PGDATABASE }}
      PGSCHEMA: ${{ secrets.PGSCHEMA }}
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      PROCESSING_DATE: ${{ github.event.inputs.date }}
    steps:
      - uses: actions/checkout@v2
      - name: Get public IP address
        run: |
          echo "IP address: $(wget -q -O - icanhazip.com)"
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Show python information
        run: python3 --version && pip3 --version
      - name: Parse parameters and sys.env
        run: |
          PROCESSING_DATE=${PROCESSING_DATE:-"latest"}
          echo "::add-path::${PWD}/../.github/scripts"
          echo "::set-env name=DATE::${PROCESSING_DATE}"
      - name: Install dependencies
        working-directory: data/services/cv19srv
        run: pip3 install -U pip setuptools ; pip3 install -r ./requirements.txt
      - name: Pull new data from the public data sources
        run: yes | ./scripts/start-pull-data-services.sh ${PROCESSING_DATE}
      - name: Export latest data from the database into the json files
        run: rm -rf ./build; yes | ./scripts/start-export-data-services.sh ${PROCESSING_DATE}
      - name: Upload data to the AWS S3 Bucket
        env:
          COVID_DATA_S3_BUCKET: ${{ secrets.COVID_DATA_S3_BUCKET }}
        run: yes | ./scripts/upload-covid-data-to-s3-bucket.sh

      - name: Send notification
        if: ${{ always() }}
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}
          DEBUG: false
        run: |
          (echo "GitHub actions finished"
          echo "Name: ${GITHUB_WORKFLOW}"
          echo "Params: date=${PROCESSING_DATE}"
          echo "Status: ${{job.status}}"
          echo "Event: ${GITHUB_EVENT_NAME}"
          echo "Time: $(date +"%Y-%m-%d %H:%M:%S%z (%Z)")"
          echo "Log: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}") \
          | ./.github/scripts/send-build-notification.sh "${{secrets.RECIPIENT}}" "${{job.status}}"


  test-data:
    name: Test new data
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [update-data]
    env:
      DEBUG: ${{ secrets.DEBUG }}
      BUILD_LOG: ./build-${{ github.run_id }}.log
      PGHOST: ${{ secrets.PGHOST }}
      PGPORT: ${{ secrets.PGPORT }}
      PGDATABASE: ${{ secrets.PGDATABASE }}
      PGSCHEMA: ${{ secrets.PGSCHEMA }}
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PROCESSING_DATE: ${{ github.event.inputs.date }}
    defaults:
      run:
        working-directory: tests/e2e
    steps:
      - uses: actions/checkout@v2
      - name: Get public IP address
        run: |
          echo "IP address: $(wget -q -O - icanhazip.com)"
      - name: Parse parameters and sys.env
        run: |
          PROCESSING_DATE=${PROCESSING_DATE:-"latest"}
          echo "::add-path::${PWD}/../.github/scripts"
          echo "::set-env name=DATE::${PROCESSING_DATE}"
      - name: Install requirements for the tests
        run: npm install
      - name: Generate data for tests
        run: npm run generate
      - name: Test static data
        env:
          COMMON_DATA_URL: ${{ secrets.COMMON_DATA_URL }}
          COVID_DATA_URL: ${{ secrets.COVID_DATA_URL }}
        run: npm run test:api

      - name: Send notification
        if: ${{ always() }}
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}
          DEBUG: false
        run: |
          (echo "GitHub actions finished"
          echo "Name: ${GITHUB_WORKFLOW}"
          echo "Params: date=${PROCESSING_DATE}"
          echo "Status: ${{job.status}}"
          echo "Event: ${GITHUB_EVENT_NAME}"
          echo "Time: $(date +"%Y-%m-%d %H:%M:%S%z (%Z)")"
          echo "Log: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}") \
          | ../../.github/scripts/send-build-notification.sh "${{secrets.RECIPIENT}}" "${{job.status}}"
