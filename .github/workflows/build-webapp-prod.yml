name: Build and deploy [prod]

on:
  workflow_dispatch:
    inputs:
      build_env:
        description: 'Environment'
        required: true
        default: 'a'

jobs:
  build-deploy-webapp-prod:
    name: Build and Deploy CV19 WebApp (PROD)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: webapp
    env:
      BUILD_LOG: ./build-${{ github.run_id }}.log
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      INTERNAL_DATA_URL: ${{ secrets.INTERNAL_DATA_URL }}
      BUILD_ENV: ${{ github.event.inputs.build_env }}
      REACT_APP_VIEW_ASSOCIATES: 0
      CONFIG_FILE: ./build-${{ github.run_id }}.conf
    steps:
      - uses: actions/checkout@v2

      - name: Fetch the whole git history (including tags)
        run: git fetch --tags --prune --unshallow

      - name: Parse parameters and sys.env
        run: |
          NODE_ENV=production
          GOOGLE_ANALYTICS_KEY="${{ secrets.PROD_GOOGLE_ANALYTICS_KEY }}"
          if [ "${BUILD_ENV}" == "a" ] || [ "${BUILD_ENV}" == "A" ]; then
            S3_BUCKET="${{ secrets.PROD_A_S3_BUCKET }}"
          else if [ "${BUILD_ENV}" == "b" ] || [ "${BUILD_ENV}" == "B" ]; then
            S3_BUCKET="${{ secrets.PROD_B_S3_BUCKET }}"
          else
            echo "Error: Incorrect Environment value: build_env = ${BUILD_ENV}"
            exit 1
          fi; fi
          echo "::add-path::${PWD}/../.github/scripts"
          echo "::set-env name=NODE_ENV::${NODE_ENV}"
          echo "::set-env name=S3_BUCKET::${S3_BUCKET}"
          echo "::set-env name=GOOGLE_ANALYTICS_KEY::${GOOGLE_ANALYTICS_KEY}"
          echo "::set-env name=REACT_APP_VIEW_ASSOCIATES::${REACT_APP_VIEW_ASSOCIATES}"

          (echo "NODE_ENV=${NODE_ENV}"
          echo "BUILD_ENV=${BUILD_ENV}"
          echo "S3_BUCKET=$(echo "${S3_BUCKET}" | sed -e 's/\(.\)/\1_/g')"
          echo "REACT_APP_VIEW_ASSOCIATES=${REACT_APP_VIEW_ASSOCIATES}"
          ) | "${PWD}/../.github/scripts/write-to-log.sh"

      - name: Show last commits
        run: |
          set -o pipefail
          (echo "Last commits in ${{github.repository}}"; git log --oneline -n 5 2>&1
          echo "Last tag in ${{github.repository}}"; git tag 2>&1 | tail -n 1
          ) | write-to-log.sh

      - name: Install dependencies
        run: |
          set -o pipefail
          (echo "Install dependencies"; npm install 2>&1) | write-to-log.sh

      - name: Build
        run: |
          set -o pipefail
          (echo "Build ${{github.repository}} (BUILD_NUMBER=${BUILD_NUMBER}) [env=${NODE_ENV}]"
          npm run build 2>&1) | write-to-log.sh

      - name: Deploy
        run: |
          set -o pipefail
          (echo "Deploy static site from ${{github.repository}} [env=${NODE_ENV}]"
          npm run deploy -- --silent 2>&1) | write-to-log.sh

      - name: Send notification
        if: ${{ always() }}
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}
          DEBUG: false
        run: |
          new_log=./build-${{ github.run_id }}-prod.log
          (echo "GitHub actions finished"
          echo "Name: ${GITHUB_WORKFLOW} (${GITHUB_JOB})"
          echo "Params: build_env=${{ github.event.inputs.build_env }}"
          echo "Status: ${{job.status}}"
          echo "Event: ${GITHUB_EVENT_NAME}"
          echo "Time: $(date +"%Y-%m-%d %H:%M:%S%z (%Z)")"
          echo "Log: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo "--------------------"
          ) > "${new_log}"
          cat "${BUILD_LOG}" >> "${new_log}"
          rm "${BUILD_LOG}"
          send-build-notification.sh "${{secrets.RECIPIENT}}" "${{job.status}}" "${new_log}"

  build-deploy-webapp-prod-internal:
    name: Build and Deploy CV19 WebApp (PROD-INTERNAL)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: webapp
    env:
      BUILD_LOG: ./build2-${{ github.run_id }}.log
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      INTERNAL_DATA_URL: ${{ secrets.INTERNAL_DATA_URL }}
      BUILD_ENV: ${{ github.event.inputs.build_env }}
      REACT_APP_VIEW_ASSOCIATES: 1
      CONFIG_FILE: ./build2-${{ github.run_id }}.conf
    steps:
      - uses: actions/checkout@v2

      - name: Fetch the whole git history (including tags)
        run: git fetch --tags --prune --unshallow

      - name: Parse parameters and sys.env
        run: |
          NODE_ENV=production
          GOOGLE_ANALYTICS_KEY="${{ secrets.PROD_GOOGLE_ANALYTICS_KEY }}"
          if [ "${BUILD_ENV}" == "a" ] || [ "${BUILD_ENV}" == "A" ]; then
            S3_BUCKET="${{ secrets.PROD_INTERNAL_A_S3_BUCKET }}"
          else if [ "${BUILD_ENV}" == "b" ] || [ "${BUILD_ENV}" == "B" ]; then
            S3_BUCKET="${{ secrets.PROD_INTERNAL_B_S3_BUCKET }}"
          else
            echo "Error: Incorrect Environment value: build_env = ${BUILD_ENV}"
            exit 1
          fi; fi
          echo "::add-path::${PWD}/../.github/scripts"
          echo "::set-env name=NODE_ENV::${NODE_ENV}"
          echo "::set-env name=S3_BUCKET::${S3_BUCKET}"
          echo "::set-env name=GOOGLE_ANALYTICS_KEY::${GOOGLE_ANALYTICS_KEY}"
          echo "::set-env name=REACT_APP_VIEW_ASSOCIATES::${REACT_APP_VIEW_ASSOCIATES}"

          (echo "NODE_ENV=${NODE_ENV}"
          echo "BUILD_ENV=${BUILD_ENV}"
          echo "S3_BUCKET=$(echo "${S3_BUCKET}" | sed -e 's/\(.\)/\1_/g')"
          echo "REACT_APP_VIEW_ASSOCIATES=${REACT_APP_VIEW_ASSOCIATES}"
          ) | "${PWD}/../.github/scripts/write-to-log.sh"

      - name: Show last commits
        run: |
          set -o pipefail
          (echo "Last commits in ${{github.repository}}"; git log --oneline -n 5 2>&1
          echo "Last tag in ${{github.repository}}"; git tag 2>&1 | tail -n 1
          ) | write-to-log.sh

      - name: Install dependencies
        run: |
          set -o pipefail
          (echo "Install dependencies"; npm install 2>&1) | write-to-log.sh

      - name: Build
        run: |
          set -o pipefail
          (echo "Build ${{github.repository}} (BUILD_NUMBER=${BUILD_NUMBER}) [env=${NODE_ENV}]"
          npm run build 2>&1) | write-to-log.sh

      - name: Deploy
        run: |
          set -o pipefail
          (echo "Deploy static site from ${{github.repository}} [env=${NODE_ENV}]"
          npm run deploy -- --silent 2>&1) | write-to-log.sh

      - name: Send notification
        if: ${{ always() }}
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}
          DEBUG: false
        run: |
          new_log=./build-${{ github.run_id }}-prod.log
          (echo "GitHub actions finished"
          echo "Name: ${GITHUB_WORKFLOW} (${GITHUB_JOB})"
          echo "Params: build_env=${{ github.event.inputs.build_env }}"
          echo "Status: ${{job.status}}"
          echo "Event: ${GITHUB_EVENT_NAME}"
          echo "Time: $(date +"%Y-%m-%d %H:%M:%S%z (%Z)")"
          echo "Log: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo "--------------------"
          ) > "${new_log}"
          cat "${BUILD_LOG}" >> "${new_log}"
          rm "${BUILD_LOG}"
          send-build-notification.sh "${{secrets.RECIPIENT}}" "${{job.status}}" "${new_log}"
