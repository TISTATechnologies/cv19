name: Run e2e tests
on:
  schedule:
    - cron: "35 6 * * *"
  workflow_dispatch:
    inputs:
      build_env:
        description: 'Environment'
        required: true
        default: 'development'
      app_url:
        description: 'Webapp url'
        required: true
        default: 'https://covid19-dev.tistatech.com'
      zips_count:
        description: 'Test zips count'
        required: false
        default: '25'
      zips:
        description: 'Test zips (comma separated)'
        required: false
      test_date:
        description: 'Test date'
        required: false
      covid_data_url:
        description: 'Covid data url'
        required: false
        default: 'https://data.tistatech.com/covid/v2'
      common_data_url:
        description: 'Common data url'
        required: false
        default: 'https://data.tistatech.com/common/v2'

jobs:

  test-server:
    name: Run e2e tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    defaults:
      run:
        working-directory: tests/e2e
    env:
      DEBUG: ${{ secrets.DEBUG }}
      BUILD_LOG: ./build-${{ github.run_id }}.log
      PGHOST: ${{ secrets.PGHOST }}
      PGPORT: ${{ secrets.PGPORT }}
      PGDATABASE: ${{ secrets.PGDATABASE }}
      PGSCHEMA: ${{ secrets.PGSCHEMA }}
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      COVID_DATA_URL: ${{ github.event.inputs.covid_data_url}}
      COMMON_DATA_URL: ${{ github.event.inputs.common_data_url}}
      BUILD_ENV: ${{ github.event.inputs.build_env }}
      APP_SERVER_URL: ${{ github.event.inputs.app_url }}
      ZIPS_COUNT: ${{ github.event.inputs.zips_count }}
      ZIPS: ${{ github.event.inputs.zips }}
      TEST_DATE: ${{ github.event.inputs.test_date }}
    steps:
      - uses: actions/checkout@v2
      - name: Pre-Build Notification
        env:
          GH_NOTIFICATION_LAMBDA_NAME: ${{ secrets.GH_NOTIFICATION_LAMBDA_NAME }}
          GH_NOTIFICATION_LAMBDA_KEY: ${{ secrets.GH_NOTIFICATION_LAMBDA_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: ../../.github/scripts/pre-build-event.sh
      - name: Parse parameters and sys.env
        run: |
          if [ "${BUILD_ENV}" == "development" ]; then
            NODE_ENV="development"
          else if [ "${BUILD_ENV}" == "demo" ]; then
            NODE_ENV="demo"
          else
            NODE_ENV="production"
          fi; fi
          if [ -z "${APP_SERVER_URL}" ]; then
            if [ "${NODE_ENV}" != "production" ]; then
              echo "Error: required app-Url parameter."
              exit 1
            else
              APP_SERVER_URL=${{ secrets.PROD_APP_SERVER_URL }}
            fi
          fi
          COVID_DATA_URL="${COVID_DATA_URL:-"${{ secrets.COVID_DATA_URL }}"}"
          COMMON_DATA_URL="${COMMON_DATA_URL:-"${{ secrets.COMMON_DATA_URL }}"}"
          ZIPS_COUNT="${ZIPS_COUNT:-"${{ secrets.TEST_ZIPS_COUNT }}"}"
          ZIPS="${ZIPS:-"${{ secrets.TEST_ZIPS }}"}"
          echo "${PWD}/../.github/scripts" >> $GITHUB_PATH
          echo "NODE_ENV=${NODE_ENV}" >> $GITHUB_ENV
          echo "APP_SERVER_URL=${APP_SERVER_URL}" >> $GITHUB_ENV
          echo "COVID_DATA_URL=${COVID_DATA_URL}" >> $GITHUB_ENV
          echo "COMMON_DATA_URL=${COMMON_DATA_URL}" >> $GITHUB_ENV
          echo "ZIPS_COUNT=${ZIPS_COUNT}" >> $GITHUB_ENV
          echo "ZIPS=${ZIPS}" >> $GITHUB_ENV

      - name: Show parameters
        run: |
          echo "Node: $(node --version)"
          python --version
          echo "NODE_ENV=${NODE_ENV}"
          echo "APP_SERVER_URL=${APP_SERVER_URL}"
          echo "COVID_DATA_URL=${COVID_DATA_URL}"
          echo "COMMON_DATA_URL=${COMMON_DATA_URL}"
          echo "ZIPS_COUNT=${ZIPS_COUNT}"
          echo "ZIPS=${ZIPS}"

      - name: Install all node dependencies
        run: npm install
      - name: Load current data from the database
        run: |
          set -o pipefail
          DEBUG=true npm run generate
          ls -ahl helpers/cv19-*.json || (echo "Error generate data files for tests" && exit 1)
          echo "Generate test data finished"

      - name: Start selenoid
        uses: Xotabu4/selenoid-github-action@v1
      - name: Check selenium server status
        env:
          SELENIUM_SERVER: ${{secrets.SELENIUM_SERVER}}
        run: |
          SELENIUM_SERVER=${SELENIUM_SERVER:-"localhost:4444"}
          echo "Check connection to http://${SELENIUM_SERVER}"
          curl -s "http://${SELENIUM_SERVER}" | grep "You are using Selenoid" || (echo "Connection to http://${SELENIUM_SERVER} error." && exit 1)
          echo "Success"

      - name: Run e2e tests for static api
        run: npm run test:api
      - name: Run data test
        run: npm run test:database
      - name: Run e2e tests for web app (static zips list)
        run: npm run test:webapp
      - name: Run e2e tests for web app (random list)
        run: ZIPS= npm run test:webapp

      - name: Send notification
        if: ${{ always() }}
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}
          DEBUG: false
        run: |
          (echo "GitHub actions finished"
          echo "Name: ${GITHUB_WORKFLOW}"
          echo "Params:"
          echo "- env=${NODE_ENV}"
          echo "- app_url=${APP_SERVER_URL}"
          echo "- zips_count=${ZIPS_COUNT}"
          echo "- zips=${ZIPS}"
          echo "Status: ${{job.status}}"
          echo "Event: ${GITHUB_EVENT_NAME}"
          echo "Time: $(date +"%Y-%m-%d %H:%M:%S%z (%Z)")"
          echo "Log: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}") \
          | ../../.github/scripts/send-build-notification.sh "${{secrets.RECIPIENT}}" "${{job.status}}"
